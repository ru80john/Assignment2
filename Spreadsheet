#include<iostream>
#include<vector>
#include<queue>

using namespace std;

void topological_sort(vector<vector<int>> &adj, vector<int> &indegree, vector<int> &val)
{
    queue<int> Q;
    for (int i = 1; i < indegree.size(); ++i) {
        if (!indegree[i]) Q.push(i);
    }
    while(!Q.empty()) {
        int tmp = Q.front();
        Q.pop();
        for (auto n:adj[tmp]) {
            val[n] += val[tmp];
            indegree[n]--;
            if (!indegree[n]) {
                Q.push(n);
            }
        }
    }
}

int main()
{
    int n,m;
    cin >> n >> m;
    vector<vector<int>> adj(n+1);
    vector<int> indegree(n+1,0);
    vector<int> val(n+1);
    while (m--) {
        char op;
        cin >> op;
        switch (op) {
            case 'A':
                int x1,y;
                cin >> x1 >> y;
                val[x1] = y;
                break;
            case 'B':
                int x2;
                cin >> x1 >> x2 >> y;
                adj[x2].emplace_back(x1);
                val[x1] = y;
                indegree[x1]++;
                break;
            case 'C':
                int x3;
                cin >> x1 >> x2 >> x3 >> y;
                adj[x2].emplace_back(x1);
                adj[x3].emplace_back(x1);
                val[x1] = y;
                indegree[x1] += 2;
                break;
            case 'D':
                int x4;
                cin >> x1 >> x2 >> x3 >> x4 >> y; 
                adj[x2].emplace_back(x1);
                adj[x3].emplace_back(x1);
                adj[x4].emplace_back(x1);
                val[x1] = y;
                indegree[x1] += 3;
                break;
        }
    }
    topological_sort(adj,indegree,val);
    for (int i = 1; i <= n; ++i) {
        if(!indegree[i]) cout << val[i] << endl;
        else cout << "#REF!" << endl;
    }

    return 0;
}
